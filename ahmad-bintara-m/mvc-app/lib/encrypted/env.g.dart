// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    164,
    4,
    241,
    246,
    59,
    86,
    70,
    160,
    220,
    93,
    75,
    160,
    200,
    135,
    155,
    249,
    130,
    124,
    255,
    62,
    104,
    161,
    142,
    0,
    249,
    133,
    120,
    7,
    207,
    23,
    249,
    238,
    150,
    190,
    192,
    162,
    19,
    103,
    232,
    70,
    98,
    227,
    199,
    44,
    164,
    152,
    159,
    126,
    41,
    147,
    182,
    65,
    242,
    232,
    229,
    170,
    2,
    92,
    229,
    122,
    111,
    186,
    199,
    35,
    163,
    135,
    211,
    40,
    63,
    28,
    97,
    25,
    218,
    114,
    58,
    117,
    223,
    62,
    57,
    234,
    248,
    105,
    221,
    100,
    64,
    172,
    191,
    65,
    217,
    246,
    31,
    75,
    39,
    254,
    1,
    127,
    80,
    129,
    8,
    163,
    140,
    53,
    102,
    150,
    10,
    163,
    34,
    203,
    86,
    15,
    200,
    173,
    159,
    101,
    236,
    155,
    251,
    46,
    46,
    159,
    78,
    143,
    179,
    201,
    244,
    147,
    67,
    126,
    47,
    116,
    184,
    158,
    90,
    126,
    115,
    17,
    47,
    187,
    152,
    227,
    27,
    78,
    201,
    157,
    8,
    255,
    134,
    66,
    180,
    146,
    197,
    29,
    89,
    6,
    10,
    239,
    191,
    133,
    62,
    2,
    25,
    118,
    184,
    151,
    116,
    171,
    197,
    49,
    116,
    191,
    229,
    73,
    195,
    37,
    26,
    77,
    66,
    31,
    38,
    140,
    213,
    199,
    244,
    55,
    14,
    200,
    212,
    132,
    169,
    90,
    91,
    192,
    36,
    40,
    19,
    227,
    43,
    158,
    186,
    48,
    214,
    76,
    25,
    46,
    0,
    165,
    203,
    69,
    188,
    255,
    98,
    239,
    22,
    83,
    14,
    107,
    145,
    82,
    190,
    112,
    143,
    147,
    189,
    49,
    190,
    14,
    203,
    90,
    8,
    49,
    216,
    123,
    145,
    3,
    70,
    146,
    31,
    12,
    65,
    4,
    71,
    127,
    4,
    81,
    100,
    233,
    47,
    230,
    205,
    178,
    45,
    44,
    48,
    31,
    77,
    71,
    164,
    188,
    102,
    99,
    158,
    98,
    41,
    22,
    19,
    162,
    4,
    60,
    27,
    87,
    85,
    6,
    156,
    61,
    246,
    7,
    193,
    44,
    156,
    64,
    116,
    133,
    245,
    159,
    164,
    125,
    125,
    80,
    5,
    91,
    34,
    235,
    86,
    102,
    103,
    111,
    117,
    244,
    157,
    41,
    168,
    236,
    154,
    214,
    187,
    84,
    183,
    97,
    236,
    224,
    99,
    97,
    181,
    150,
    9,
    211,
    74,
    32,
    242,
    86,
    66,
    161,
    42,
    126,
    82,
    29,
    197,
    87,
    83,
    151,
    162,
    3,
    17,
    11,
    166,
    137,
    30,
    178,
    107,
    125,
    208,
    26,
    71,
    167,
    207,
    144,
    52,
    47,
    88,
    148,
    129,
    92,
    106,
    161,
    167,
    231,
    124,
    243,
    183,
    222,
    98,
    45,
    123,
    9,
    2,
    77,
    231,
    44,
    85,
    242,
    66,
    62,
    119,
    50,
    107,
    55,
    95,
    230,
    221,
    175,
    80,
    109,
    122,
    115,
    116,
    39,
    17,
    180,
    47,
    245,
    96,
    187,
    42,
    255,
    227,
    87,
    38,
    29,
    184,
    209
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
