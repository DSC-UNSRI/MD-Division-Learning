// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    4,
    201,
    183,
    219,
    231,
    2,
    232,
    133,
    4,
    16,
    211,
    78,
    211,
    19,
    175,
    152,
    29,
    89,
    60,
    230,
    39,
    75,
    208,
    218,
    252,
    85,
    72,
    228,
    106,
    99,
    55,
    121,
    49,
    116,
    137,
    131,
    34,
    108,
    134,
    107,
    153,
    241,
    226,
    51,
    110,
    36,
    252,
    109,
    138,
    114,
    229,
    14,
    10,
    67,
    237,
    38,
    132,
    151,
    183,
    200,
    194,
    47,
    71,
    132,
    166,
    133,
    221,
    115,
    158,
    33,
    118,
    177,
    66,
    98,
    11,
    1,
    160,
    240,
    11,
    37,
    222,
    72,
    30,
    242,
    212,
    50,
    106,
    142,
    77,
    133,
    139,
    45,
    81,
    56,
    33,
    3,
    151,
    183,
    202,
    130,
    168,
    210,
    124,
    65,
    174,
    3,
    114,
    62,
    229,
    10,
    62,
    151,
    174,
    50,
    151,
    56,
    120,
    134,
    48,
    30,
    86,
    240,
    159,
    101,
    161,
    63,
    120,
    219,
    21,
    24,
    30,
    8,
    62,
    63,
    163,
    50,
    223,
    242,
    178,
    55,
    99,
    32,
    55,
    19,
    93,
    139,
    30,
    218,
    131,
    245,
    156,
    224,
    130,
    61,
    78,
    122,
    69,
    22,
    28,
    0,
    242,
    23,
    93,
    240,
    98,
    22,
    197,
    193,
    56,
    72,
    161,
    226,
    233,
    220,
    23,
    86,
    98,
    51,
    226,
    243,
    65,
    155,
    139,
    42,
    144,
    37,
    127,
    225,
    251,
    15,
    93,
    169,
    18,
    34,
    230,
    191,
    198,
    194,
    213,
    54,
    244,
    96,
    224,
    18,
    20,
    213,
    139,
    255,
    135,
    108,
    5,
    10,
    54,
    128,
    70,
    158,
    157,
    87,
    81,
    240,
    168,
    71,
    200,
    76,
    199,
    55,
    120,
    137,
    196,
    23,
    79,
    83,
    230,
    95,
    111,
    238,
    152,
    72,
    149,
    203,
    72,
    246,
    132,
    149,
    0,
    22,
    187,
    63,
    171,
    20,
    33,
    210,
    235,
    139,
    149,
    223,
    86,
    238,
    130,
    181,
    175,
    9,
    252,
    252,
    253,
    218,
    35,
    226,
    76,
    166,
    35,
    243,
    243,
    78,
    16,
    184,
    195,
    248,
    112,
    0,
    19,
    0,
    78,
    79,
    57,
    228,
    8,
    243,
    11,
    137,
    1,
    19,
    249,
    232,
    42,
    242,
    214,
    22,
    184,
    33,
    232,
    73,
    249,
    91,
    145,
    33,
    29,
    136,
    233,
    170,
    206,
    192,
    104,
    129,
    219,
    91,
    22,
    251,
    183,
    154,
    93,
    241,
    131,
    225,
    74,
    174,
    132,
    52,
    22,
    88,
    251,
    183,
    96,
    191,
    33,
    95,
    232,
    100,
    142,
    106,
    6,
    91,
    58,
    198,
    194,
    249,
    196,
    102,
    52,
    190,
    147,
    44,
    35,
    9,
    12,
    129,
    238,
    85,
    103,
    98,
    189,
    92,
    75,
    9,
    214,
    136,
    125,
    107,
    132,
    41,
    37,
    196,
    249,
    95,
    3,
    230,
    192,
    60,
    109,
    6,
    255,
    99,
    83,
    51,
    174,
    234,
    43,
    207,
    104,
    16,
    111,
    171,
    59,
    220,
    94,
    95,
    111,
    159,
    24,
    119,
    40,
    200,
    86,
    2,
    148,
    240,
    212,
    92,
    202,
    145,
    7,
    183,
    246,
    105,
    130,
    13
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
