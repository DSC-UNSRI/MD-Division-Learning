// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    97,
    240,
    198,
    53,
    93,
    185,
    196,
    111,
    186,
    97,
    8,
    135,
    71,
    234,
    85,
    170,
    12,
    69,
    151,
    247,
    84,
    189,
    119,
    223,
    91,
    9,
    44,
    96,
    187,
    151,
    244,
    253,
    118,
    143,
    108,
    76,
    231,
    240,
    235,
    240,
    177,
    12,
    197,
    138,
    218,
    103,
    177,
    229,
    58,
    176,
    159,
    61,
    139,
    124,
    35,
    193,
    68,
    115,
    208,
    16,
    229,
    35,
    226,
    96,
    193,
    13,
    232,
    36,
    112,
    47,
    82,
    189,
    218,
    127,
    137,
    91,
    132,
    27,
    160,
    227,
    29,
    197,
    7,
    198,
    186,
    245,
    92,
    98,
    4,
    115,
    19,
    205,
    49,
    57,
    251,
    208,
    252,
    33,
    24,
    37,
    17,
    4,
    114,
    194,
    50,
    139,
    210,
    168,
    149,
    78,
    88,
    17,
    217,
    48,
    171,
    221,
    4,
    196,
    91,
    189,
    86,
    252,
    142,
    249,
    135,
    76,
    165,
    181,
    67,
    108,
    31,
    124,
    79,
    154,
    98,
    185,
    174,
    81,
    80,
    156,
    238,
    207,
    114,
    225,
    89,
    4,
    141,
    23,
    229,
    213,
    33,
    3,
    121,
    24,
    88,
    164,
    173,
    233,
    85,
    42,
    42,
    40,
    5,
    237,
    145,
    6,
    5,
    32,
    127,
    26,
    46,
    117,
    152,
    4,
    104,
    126,
    148,
    66,
    8,
    72,
    109,
    209,
    120,
    55,
    201,
    97,
    255,
    12,
    196,
    63,
    78,
    131,
    150,
    73,
    194,
    86,
    24,
    215,
    121,
    221,
    16,
    176,
    245,
    216,
    0,
    233,
    67,
    211,
    206,
    0,
    212,
    100,
    130,
    152,
    165,
    88,
    62,
    50,
    115,
    130,
    135,
    139,
    216,
    240,
    147,
    198,
    255,
    67,
    126,
    18,
    117,
    40,
    164,
    45,
    2,
    198,
    117,
    128,
    64,
    33,
    66,
    128,
    24,
    251,
    254,
    217,
    230,
    51,
    115,
    176,
    168,
    39,
    201,
    180,
    88,
    255,
    60,
    230,
    7,
    237,
    245,
    211,
    170,
    198,
    193,
    176,
    47,
    56,
    108,
    66,
    98,
    164,
    108,
    226,
    193,
    157,
    220,
    152,
    140,
    194,
    201,
    191,
    215,
    33,
    164,
    236,
    222,
    13,
    16,
    64,
    63,
    156,
    177,
    216,
    62,
    229,
    102,
    39,
    158,
    185,
    131,
    127,
    69,
    149,
    17,
    94,
    40,
    20,
    44,
    89,
    6,
    96,
    63,
    138,
    189,
    221,
    154,
    61,
    189,
    255,
    165,
    209,
    90,
    44,
    87,
    213,
    206,
    183,
    15,
    184,
    195,
    32,
    119,
    145,
    136,
    42,
    22,
    159,
    79,
    7,
    109,
    74,
    221,
    148,
    84,
    248,
    132,
    243,
    247,
    80,
    254,
    250,
    114,
    168,
    187,
    184,
    169,
    163,
    20,
    207,
    200,
    222,
    4,
    80,
    217,
    198,
    174,
    31,
    72,
    102,
    176,
    43,
    156,
    118,
    145,
    35,
    48,
    210,
    129,
    82,
    67,
    204,
    11,
    130,
    44,
    187,
    208,
    137,
    74,
    41,
    226,
    13,
    162,
    140,
    175,
    28,
    205,
    75,
    138,
    175,
    57,
    151,
    58,
    211,
    237,
    119,
    140,
    52,
    214,
    101,
    172,
    38,
    189,
    202,
    96,
    229
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncrypter.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
